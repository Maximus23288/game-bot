string: map;
int: l, i, j, x, y, kbomb, kghost, kplayer, k4, k5, k6, max;
const int N;
string A[N][N];
int xbomb[N];
int ybomb[N];
int lbomb[N];
int xghost[N];
int yghost[N];
int lghost[N];
int xplayer[N];
int yplayer[N];
int lplayer[N];
min = 10000;
int xm[3] { x+1, x-1, x, x };
int ym[3] { y, y, y+1, y-1 };
l = sqrt(size(map));
for (i=0;i<l;i++){
  for (j=0;j<l;j++){
    A[i][j] = map[i*l+j];
  }
}
for (i=0;i<l;i++){
  for (j=0;j<l;j++){
    if (A[i][j]=="Ѡ"){
      send.up;
    }
    if ((A[i][j]=="☺") || (A[i][j]=="☻")){
      x = j;
      y = i;
    }
  }
}
for (i=0;i<l;i++){
  for (j=0;j<l;j++){
    if ((A[i][j]=="5") || (A[i][j]=="4") || (A[i][j]=="3") || (A[i][j]=="2") || (A[i][j]=="1"))
   {
     n = sqrt((x-j)*(x-j)+(y-i)*(y-i));
      if(n<5)
      {
         xbomb[kbomb]=j;
         ybomb[kbomb]=i;
         lbomb[kbomb]=n;
         kbomb++;
      }
     }
       if (A[i][j]=="&")
   {
     n = sqrt((x-j)*(x-j)+(y-i)*(y-i));
      if(n<5)
      {
         xghost[kghost]=j;
         yghost[kghost]=i;
         lghost[kghost]=n;
         kghost++;
      }
     }
        if ((A[i][j]=="♥") || (A[i][j])=="♠"))
   {
     n = sqrt((x-j)*(x-j)+(y-i)*(y-i));
      if(n<5)
      {
         xplayer[kplayer]=j;
         yplayer[kplayer]=i;
         lplayer[kplayer]=n;
         kplayer++;
      }
     }
   }
   

/----------------------------------------------------/

pos1 = 0;
pos2 = 0;
pos3 = 0;
pos4 = 0;
for (i=0;i<N;i++){
  if (x<x[i]) && (y>y[i])
    bomb in 1 quarter
    pos1++;
  if (x>x[i]) && (y>y[i])
    bomb in 2 quarter
    pos2++;
  if (x>x[i]) && (y<y[i])
    bomb in 3 quarter
    pos3++;
  if (x<x[i]) && (y<y[i])
    bomb in 4 quarter
    pos4++;
}
if ((pos1>pos2) && (pos1>pos3) && (pos1>pos4))
  if (pos2>=pos4)
    right
  if (pos2<pos4)
    up
if ((pos2>pos1) && (pos2>pos3) && (pos2>pos4))
  if (pos1>=pos3)
    left
  if (pos1<pos3)
    up
if ((pos3>pos1) && (pos3>pos2) && (pos3>pos4))
  if (pos2>=pos4)
    down
  if (pos2<pos4)
    left
if ((pos4>pos1) && (pos4>pos2) && (pos4>pos3))
  if (pos1>=pos3)
    down
  if (pos1<pos3)
    right

\------------------------------------------------------\


    
for (i=0;i<N;i++){
  if (l<max){
    min = l;
    kbomb = i;
  }
}
    
    
    
    if ((x>=x1)&&((abs(x-x1))<(abs(y-y1))) right; 
    if ((x>=x1)&&((abs(x-x1))>(abs(y-y1)))        
    {
    if (y>=y1)  down (maxim);
    if (y<=y1)  up ;  
    }
    if ((x<=x1)&&((abs(x-x1))<(abs(y-y1))) left;
    if ((x<=x1)&&((abs(x-x1))>(abs(y-y1)))
    {
    if (y>=y1)  down (maxim);
    if (y<=y1)  up ;  
    }
      
    for(m=0;m<3;m++)
      { if(lbomb[0]-sqrt(sqr(xbomb[0]-xm[m])+sqr(ybomb[0]-ym[m]))+lbomb[1]-sqrt(sqr(xbomb[1]-xm[m])+sqr(ybomb[1]-ym[m]))< top )
           { top=lbomb[0]-sqrt(sqr(xbomb[0]-xm[m])+sqr(ybomb[0]-ym[m]))+lbomb[1]-sqrt(sqr(xbomb[1]-xm[m])+sqr(ybomb[1]-ym[m]))
              topm=m;   
              
          if (topm = 0) right
          if (topm = 1) left
          if (topm = 2) down
          if (topm = 3) up
              
  }
}
